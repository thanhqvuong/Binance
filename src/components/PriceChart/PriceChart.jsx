import React, { useState, useEffect } from "react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import "./PriceChart.css";

// H√†m t·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p cho bi·ªÉu ƒë·ªì
const generateFakeData = () => {
  const now = new Date();
  let startPriceVND = 150000; // Gi√° kh·ªüi ƒëi·ªÉm c·ªßa VNƒê
  let data = [];

  for (let i = 29; i >= 0; i--) {
    let randomChangePercent = (Math.random() * 70 - 35).toFixed(2); // Bi·∫øn ƒë·ªông gi√° t·ª´ -35% ƒë·∫øn +35%
    let changeAmount = (startPriceVND * randomChangePercent) / 100; // T√≠nh m·ª©c thay ƒë·ªïi gi√°
    startPriceVND = Math.max(1, startPriceVND + changeAmount); // ƒê·∫£m b·∫£o gi√° kh√¥ng nh·ªè h∆°n 1
    let startPriceUSDT = (startPriceVND / 150000).toFixed(3); // Quy ƒë·ªïi ra USDT
    let time = new Date(now.getTime() - i * 1000).toLocaleTimeString(); // M·ªëc th·ªùi gian

    data.push({ time, vnd: Math.round(startPriceVND), usdt: parseFloat(startPriceUSDT) });
  }
  return data;
};

const PriceChart = () => {
  const [data, setData] = useState(generateFakeData()); // State ch·ª©a d·ªØ li·ªáu bi·ªÉu ƒë·ªì
  const [latestPriceVND, setLatestPriceVND] = useState(data[data.length - 1].vnd); // Gi√° VNƒê m·ªõi nh·∫•t
  const [latestPriceUSDT, setLatestPriceUSDT] = useState(data[data.length - 1].usdt); // Gi√° USDT m·ªõi nh·∫•t
  const [priceChangePercent, setPriceChangePercent] = useState(0); // % bi·∫øn ƒë·ªông gi√°
  const [priceColor, setPriceColor] = useState("#000"); // M√†u s·∫Øc th·ªÉ hi·ªán xu h∆∞·ªõng gi√°

  // H√†m c·∫≠p nh·∫≠t gi√° ng·∫´u nhi√™n m·ªói gi√¢y
  const updatePrice = () => {
    const now = new Date();
    let randomChangePercent = (Math.random() * 70 - 35).toFixed(2); // Bi·∫øn ƒë·ªông ¬±35%
    let changeAmount = (latestPriceVND * randomChangePercent) / 100; // T√≠nh m·ª©c thay ƒë·ªïi gi√°
    let newPriceVND = Math.max(1, latestPriceVND + changeAmount); // ƒê·∫£m b·∫£o gi√° kh√¥ng √¢m
    let newPriceUSDT = (newPriceVND / 150000).toFixed(3); // Quy ƒë·ªïi sang USDT

    let percentChange = ((newPriceVND - latestPriceVND) / latestPriceVND) * 100; // T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi√°
    setPriceChangePercent(percentChange.toFixed(2));

    // X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n bi·∫øn ƒë·ªông gi√°
    if (newPriceVND > latestPriceVND) setPriceColor("#0ecb81"); // Xanh n·∫øu gi√° tƒÉng
    else if (newPriceVND < latestPriceVND) setPriceColor("#ff4d4f"); // ƒê·ªè n·∫øu gi√° gi·∫£m
    else setPriceColor("#000"); // M√†u m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng thay ƒë·ªïi

    // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi
    setLatestPriceVND(newPriceVND);
    setLatestPriceUSDT(parseFloat(newPriceUSDT));

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu bi·ªÉu ƒë·ªì, gi·ªØ l·∫°i 30 ƒëi·ªÉm d·ªØ li·ªáu g·∫ßn nh·∫•t
    setData((prevData) => [
      ...prevData.slice(-29),
      { time: now.toLocaleTimeString(), vnd: Math.round(newPriceVND), usdt: parseFloat(newPriceUSDT) },
    ]);
  };

  // useEffect thi·∫øt l·∫≠p interval ƒë·ªÉ c·∫≠p nh·∫≠t gi√° m·ªói gi√¢y
  useEffect(() => {
    const interval = setInterval(updatePrice, 1000);
    return () => clearInterval(interval); // D·ªçn d·∫πp khi component unmount
  }, [latestPriceVND]);

  return (
    <div className="price-chart">
      <h2>üìà Bi·ªÉu ƒê·ªì Gi√° USDT/VND</h2>

      {/* Hi·ªÉn th·ªã gi√° VNƒê v√† USDT hi·ªán t·∫°i v·ªõi m√†u s·∫Øc thay ƒë·ªïi theo xu h∆∞·ªõng */}
      <p style={{ color: priceColor, fontWeight: "bold", fontSize: "18px" }}>
        Gi√° VNƒê: {latestPriceVND.toLocaleString("vi-VN").replace(/\./g, ",")} VND |
        Gi√° USDT: {latestPriceUSDT} USDT
      </p>

      {/* Hi·ªÉn th·ªã ph·∫ßn trƒÉm thay ƒë·ªïi gi√° v·ªõi icon t∆∞∆°ng ·ª©ng */}
      <p style={{ color: priceColor, fontSize: "16px", fontWeight: "bold" }}>
        {priceChangePercent > 0 && `üü¢ +${priceChangePercent}%`}
        {priceChangePercent < 0 && `üî¥ ${priceChangePercent}%`}
        {priceChangePercent == 0 && `‚ö´ 0.00%`}
      </p>

      {/* Bi·ªÉu ƒë·ªì gi√° theo th·ªùi gian */}
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data.slice(-10)} barCategoryGap="30%">
          <CartesianGrid strokeDasharray="3 3" stroke="#444" /> {/* L∆∞·ªõi n·ªÅn */}
          <XAxis dataKey="time" tick={{ fill: "#ccc" }} /> {/* Tr·ª•c X hi·ªÉn th·ªã th·ªùi gian */}
          <YAxis tick={{ fill: "#ccc" }} /> {/* Tr·ª•c Y hi·ªÉn th·ªã gi√° */}
          <Tooltip formatter={(value) => value.toLocaleString("vi-VN").replace(/\./g, ",")} /> {/* Tooltip hi·ªÉn th·ªã gi√° */}
          <Legend /> {/* Ch√∫ th√≠ch c√°c thanh trong bi·ªÉu ƒë·ªì */}
          <Bar dataKey="vnd" fill="#fcb900" name="VNƒê" /> {/* Thanh bi·ªÉu ƒë·ªì cho VNƒê */}
          <Bar dataKey="usdt" fill="#0ecb81" name="USDT" /> {/* Thanh bi·ªÉu ƒë·ªì cho USDT */}
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default PriceChart;
