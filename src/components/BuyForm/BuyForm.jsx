import React, { useState, useEffect } from "react";
import dayjs from "dayjs";
import "./BuyForm.css";

const BuyForm = () => {
  const [vnd, setVnd] = useState(150000);
  const [usdtAmount, setUsdtAmount] = useState(1);
  const [balance, setBalance] = useState(0);
  const [subscription, setSubscription] = useState(null);
  const [isConfirmed, setIsConfirmed] = useState(false);
  const USDT_RATE = 25870;

  useEffect(() => {
    loadUserData();
  }, []);

  const formatCurrency = (value) => value.toLocaleString("vi-VN").replace(/\./g, ",");

  const loadUserData = () => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser) return;

    const transactions = JSON.parse(localStorage.getItem("transactions")) || [];
    const userTransactions = transactions.filter(tx => tx.username === storedUser.username);

    let totalVND = userTransactions.reduce((acc, tx) => {
      if (tx.type === "N·∫°p") return acc + tx.amount;
      if (tx.type === "R√∫t") return acc - tx.amount;
      return acc;
    }, 0);
    setBalance(totalVND);

    const storedSubscription = JSON.parse(localStorage.getItem("subscription"));
    if (storedSubscription?.username === storedUser.username) {
      setSubscription(storedSubscription.plan);
      setUsdtAmount(storedSubscription.vndAmount / USDT_RATE);
      setIsConfirmed(true);
    }
  };

  const handleSubscriptionChange = (plan) => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser || balance < vnd) return;

    const newSubscription = {
      username: storedUser.username,
      plan,
      vndAmount: vnd,
    };
    localStorage.setItem("subscription", JSON.stringify(newSubscription));
    setSubscription(plan);
    setIsConfirmed(false);
  };

  const confirmSubscription = () => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser) return;

    const transactions = JSON.parse(localStorage.getItem("transactions")) || [];
    const newTransaction = {
      username: storedUser.username, // L∆∞u k√®m username ƒë·ªÉ qu·∫£n l√Ω user
      type: "Mua", // Lo·∫°i giao d·ªãch
      amount: vnd, // S·ªë ti·ªÅn giao d·ªãch (VND)
      currency: "VND", // ƒê∆°n v·ªã ti·ªÅn t·ªá
      time: formattedTime, // Th·ªùi gian ch√≠nh x√°c
    };
    transactions.push(newTransaction);
    localStorage.setItem("transactions", JSON.stringify(transactions));

    setIsConfirmed(true);
    alert(`‚úÖ B·∫°n ƒë√£ ch·ªçn g√≥i ${subscription} v·ªõi ${usdtAmount} USDT!`);
  };

  const cancelSubscription = () => {
    localStorage.removeItem("subscription");
    setSubscription(null);
    setIsConfirmed(false);
  };

  const increaseUSDT = () => {
    setVnd((usdtAmount + 1) * USDT_RATE);
    setUsdtAmount(usdtAmount + 1);
  };

  const decreaseUSDT = () => {
    if (usdtAmount > 1) {
      setVnd((usdtAmount - 1) * USDT_RATE);
      setUsdtAmount(usdtAmount - 1);
    }
  };

  return (
    <div className="buy-form">
      <h2>üîπ Giao D·ªãch USDT ƒê·ªãnh K·ª≥ üîπ</h2>
      <p><strong>S·ªë d∆∞:</strong> {formatCurrency(balance)} VND</p>
      {subscription ? (
        <div>
          <p>G√≥i hi·ªán t·∫°i: {subscription} - {formatCurrency(vnd)} VND</p>
          {!isConfirmed ? (
            <>
              <button onClick={decreaseUSDT}>-</button>
              <span>{usdtAmount} USDT</span>
              <button onClick={increaseUSDT}>+</button>
              <button onClick={confirmSubscription}>‚úÖ X√°c nh·∫≠n</button>
            </>
          ) : (
            <>
              <button onClick={cancelSubscription}>‚ùå H·ªßy g√≥i</button>
              <button onClick={() => setIsConfirmed(false)}>üîÑ ƒê·ªïi g√≥i</button>
            </>
          )}
        </div>
      ) : (
        <div>
          <button onClick={() => handleSubscriptionChange("daily")}>M·ªói ng√†y</button>
          <button onClick={() => handleSubscriptionChange("every2days")}>2 ng√†y/l·∫ßn</button>
          <button onClick={() => handleSubscriptionChange("monthly")}>M·ªói th√°ng</button>
        </div>
      )}
    </div>
  );
};

export default BuyForm;
