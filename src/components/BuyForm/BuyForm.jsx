import React, { useState, useEffect } from "react"; // Import React v√† c√°c hooks
import "./BuyForm.css"; // Import CSS cho giao di·ªán

const BuyForm = () => {
  const [vnd, setVnd] = useState(150000); // S·ªë ti·ªÅn m·∫∑c ƒë·ªãnh t·ªëi thi·ªÉu (VND)
  const [usdtAmount, setUsdtAmount] = useState((150000 / 25870).toFixed(6)); // S·ªë l∆∞·ª£ng USDT t√≠nh theo t·ª∑ gi√°
  const [error, setError] = useState(""); // L∆∞u tr·∫°ng th√°i l·ªói
  const [balance, setBalance] = useState(0); // S·ªë d∆∞ t√†i kho·∫£n (VND)
  const [subscription, setSubscription] = useState(null); // G√≥i ƒë·ªãnh k·ª≥ hi·ªán t·∫°i
  const [lastPurchase, setLastPurchase] = useState(null); // L·∫ßn mua cu·ªëi c√πng
  const [showConfirm, setShowConfirm] = useState(false); // Hi·ªÉn th·ªã n√∫t x√°c nh·∫≠n
  const USDT_RATE = 25870; // T·ª∑ gi√° USDT

  // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ localStorage khi component mount
  useEffect(() => {
    loadUserData();
  }, []);

  // H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn (VND) c√≥ d·∫•u ph·∫©y
  const formatCurrency = (value) => {
    return value.toLocaleString("vi-VN").replace(/\./g, ",");
  };

  // H√†m t·∫£i d·ªØ li·ªáu t·ª´ localStorage
  const loadUserData = () => {
    const storedUser = JSON.parse(localStorage.getItem("user")); // L·∫•y th√¥ng tin user t·ª´ localStorage
    if (!storedUser) return;

    // L·∫•y danh s√°ch giao d·ªãch t·ª´ localStorage
    const transactions = JSON.parse(localStorage.getItem("transactions")) || [];
    const userTransactions = transactions.filter(tx => tx.username === storedUser.username);

    // T√≠nh to√°n s·ªë d∆∞ t·ª´ c√°c giao d·ªãch (c·ªông n·∫°p, tr·ª´ r√∫t)
    let totalVND = userTransactions.reduce((acc, tx) => {
      if (tx.type === "N·∫°p") return acc + tx.amount;
      if (tx.type === "R√∫t") return acc - tx.amount;
      return acc;
    }, 0);
    setBalance(totalVND); // C·∫≠p nh·∫≠t s·ªë d∆∞

    // L·∫•y th√¥ng tin g√≥i ƒë·ªãnh k·ª≥
    const storedSubscription = JSON.parse(localStorage.getItem("subscription"));
    if (storedSubscription?.username === storedUser.username) {
      setSubscription(storedSubscription.plan);
      setUsdtAmount(storedSubscription.vndAmount / USDT_RATE); // C·∫≠p nh·∫≠t s·ªë USDT t·ª´ g√≥i ƒë·ªãnh k·ª≥
      setLastPurchase(storedSubscription.lastPurchase);
    }
  };

  // Khi ch·ªçn g√≥i ƒë·ªãnh k·ª≥
  const handleSubscriptionChange = (plan) => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser || balance < vnd) {
      setError("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß!");
      return;
    }

    // C·∫≠p nh·∫≠t th√¥ng tin g√≥i v√†o localStorage
    const newSubscription = {
      username: storedUser.username,
      plan,
      vndAmount: vnd, // S·ªë ti·ªÅn VND theo g√≥i
      lastPurchase: null, // Reset ng√†y mua
    };
    localStorage.setItem("subscription", JSON.stringify(newSubscription));
    setSubscription(plan); // C·∫≠p nh·∫≠t UI
    setShowConfirm(true); // Hi·ªÉn th·ªã n√∫t x√°c nh·∫≠n
  };

  // Khi x√°c nh·∫≠n g√≥i ƒë·ªãnh k·ª≥
  const confirmSubscription = () => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser) return;

    const today = new Date().toISOString().split("T")[0]; // L·∫•y ng√†y h√¥m nay

    // Ki·ªÉm tra n·∫øu h√¥m nay ƒë√£ mua g√≥i th√¨ kh√¥ng cho mua l·∫°i
    if (lastPurchase === today) {
      setError("‚úîÔ∏è H√¥m nay b·∫°n ƒë√£ mua g√≥i n√†y r·ªìi!");
      return;
    }

    // T·∫°o giao d·ªãch v√† l∆∞u v√†o transactions
    const newTransaction = {
      username: storedUser.username,
      type: "Mua",
      amount: vnd,
      currency: "VND",
      time: new Date().toLocaleString("vi-VN"), // L·∫•y th·ªùi gian hi·ªán t·∫°i
    };

    const transactions = JSON.parse(localStorage.getItem("transactions")) || [];
    transactions.push(newTransaction);
    localStorage.setItem("transactions", JSON.stringify(transactions));

    // C·∫≠p nh·∫≠t th√¥ng tin g√≥i ƒë·ªãnh k·ª≥ (c√≥ th·ªùi gian mua)
    const updatedSubscription = {
      ...JSON.parse(localStorage.getItem("subscription")),
      lastPurchase: today,
    };
    localStorage.setItem("subscription", JSON.stringify(updatedSubscription));
    setLastPurchase(today); // C·∫≠p nh·∫≠t ng√†y mua cu·ªëi

    setShowConfirm(false); // ·∫®n n√∫t x√°c nh·∫≠n
    setError("‚úîÔ∏è B·∫°n ƒë√£ ch·ªçn g√≥i ƒë·ªãnh k·ª≥ th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
  };

  // H·ªßy g√≥i ƒë·ªãnh k·ª≥
  const cancelSubscription = () => {
    localStorage.removeItem("subscription");
    setSubscription(null);
    setShowConfirm(false);
  };

  // TƒÉng s·ªë l∆∞·ª£ng USDT mu·ªën mua
  const increaseUSDT = () => {
    let newVnd = (usdtAmount + 1) * USDT_RATE;
    setVnd(newVnd);
    setUsdtAmount(usdtAmount + 1);
  };

  // Gi·∫£m s·ªë l∆∞·ª£ng USDT mu·ªën mua
  const decreaseUSDT = () => {
    if (usdtAmount > 1) {
      let newVnd = (usdtAmount - 1) * USDT_RATE;
      setVnd(newVnd);
      setUsdtAmount(usdtAmount - 1);
    }
  };

  return (
    <div className="buy-form">
      <h2>üîπ Giao D·ªãch USDT ƒê·ªãnh K·ª≥ üîπ</h2>
      <p><strong>S·ªë d∆∞:</strong> {formatCurrency(balance)} VND</p>

      {subscription ? (
        <div>
          <p>G√≥i hi·ªán t·∫°i: {subscription} - {formatCurrency(vnd)} VND</p>
          <button onClick={decreaseUSDT}>-</button>
          <span>{usdtAmount} USDT</span>
          <button onClick={increaseUSDT}>+</button>
          <button onClick={cancelSubscription}>‚ùå H·ªßy g√≥i</button>
          {showConfirm && <button onClick={confirmSubscription}>‚úîÔ∏è X√°c nh·∫≠n</button>}
        </div>
      ) : (
        <div>
          <button onClick={() => handleSubscriptionChange("daily")} disabled={balance < vnd}>M·ªói ng√†y</button>
          <button onClick={() => handleSubscriptionChange("every2days")} disabled={balance < vnd}>2 ng√†y/l·∫ßn</button>
          <button onClick={() => handleSubscriptionChange("monthly")} disabled={balance < vnd}>M·ªói th√°ng</button>
        </div>
      )}

      {error && <p className="error">{error}</p>}
    </div>
  );
};

export default BuyForm;
